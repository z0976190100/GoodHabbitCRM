/**
 * Bundle of @devexpress/dx-react-grid-bootstrap3
 * Generated: 2018-02-02
 * Version: 1.0.0
 * License: https://js.devexpress.com/Licensing
 */

import React from 'react';
import PropTypes from 'prop-types';
import { ColumnChooser, DragDropProvider, Grid, GroupPanelLayout, GroupingPanel, PagingPanel, StaticTableLayout, Table, TableColumnReordering, TableColumnResizing, TableColumnVisibility, TableEditColumn, TableEditRow, TableFilterRow, TableGroupRow, TableHeaderRow, TableLayout, TableRowDetail, TableSelection, Toolbar, VirtualTableLayout } from '@devexpress/dx-react-grid';
import classNames from 'classnames';
import { Overlay, Pager, Pagination } from 'react-bootstrap';
import { firstRowOnPage, lastRowOnPage } from '@devexpress/dx-grid-core';
import { DragSource, Draggable, DropTarget, createRenderComponent } from '@devexpress/dx-react-core';

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();





var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};



var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};









var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var Root = function Root(_ref) {
  var children = _ref.children,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['children', 'className']);
  return React.createElement(
    'div',
    _extends({ className: classNames('panel panel-default', className) }, restProps),
    children
  );
};

Root.propTypes = {
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),
  className: PropTypes.string
};

Root.defaultProps = {
  children: undefined,
  className: undefined
};

var Grid$1 = function Grid$$1(_ref) {
  var children = _ref.children,
      props = objectWithoutProperties(_ref, ['children']);
  return React.createElement(
    Grid,
    _extends({
      rootComponent: Root
    }, props),
    children
  );
};

Grid$1.Root = Root;

Grid$1.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

var Popover = function Popover(_ref) {
  var children = _ref.children,
      style = _ref.style;
  return React.createElement(
    'div',
    {
      className: 'dropdown-menu',
      style: _extends({}, style, {
        padding: 0,
        display: 'block',
        border: 'none'
      })
    },
    children
  );
};

Popover.propTypes = {
  children: PropTypes.node.isRequired,
  style: PropTypes.object
};

Popover.defaultProps = {
  style: undefined
};

var Overlay$1 = function Overlay$$1(_ref2) {
  var visible = _ref2.visible,
      target = _ref2.target,
      children = _ref2.children,
      onHide = _ref2.onHide,
      restProps = objectWithoutProperties(_ref2, ['visible', 'target', 'children', 'onHide']);
  return React.createElement(
    Overlay,
    _extends({
      show: visible,
      target: target,
      container: target ? target.parentElement : undefined,
      onHide: onHide,
      placement: 'bottom',
      rootClose: true,
      animation: false
    }, restProps),
    React.createElement(
      Popover,
      null,
      children
    )
  );
};

Overlay$1.propTypes = {
  children: PropTypes.node.isRequired,
  onHide: PropTypes.func.isRequired,
  visible: PropTypes.bool,
  target: PropTypes.object
};

Overlay$1.defaultProps = {
  visible: false,
  target: null
};

var Container = function Container(_ref) {
  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'style']);
  return React.createElement(
    'div',
    _extends({
      className: classNames('list-group', className),
      style: _extends({ marginBottom: 0 }, style)
    }, restProps),
    children
  );
};

Container.propTypes = {
  children: PropTypes.arrayOf(PropTypes.node).isRequired,
  className: PropTypes.string,
  style: PropTypes.object
};

Container.defaultProps = {
  className: undefined,
  style: undefined
};

var Item = function Item(_ref) {
  var _ref$item = _ref.item,
      column = _ref$item.column,
      hidden = _ref$item.hidden,
      onToggle = _ref.onToggle,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['item', 'onToggle', 'className']);
  return React.createElement(
    'button',
    _extends({
      className: classNames('list-group-item', className),
      style: { outline: 'none' },
      type: 'button',
      onClick: onToggle
    }, restProps),
    React.createElement('input', {
      type: 'checkbox',
      style: { cursor: 'pointer' },
      tabIndex: -1,
      checked: !hidden,
      onChange: onToggle,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    }),
    '\xA0',
    column.title || column.name
  );
};

Item.propTypes = {
  item: PropTypes.shape({
    column: PropTypes.shape({
      name: PropTypes.string
    }),
    hidden: PropTypes.bool
  }).isRequired,
  onToggle: PropTypes.func,
  className: PropTypes.string
};

Item.defaultProps = {
  onToggle: function onToggle() {},
  className: undefined
};

var ToggleButton = function ToggleButton(_ref) {
  var onToggle = _ref.onToggle,
      className = _ref.className,
      getMessage = _ref.getMessage,
      buttonRef = _ref.buttonRef,
      restProps = objectWithoutProperties(_ref, ['onToggle', 'className', 'getMessage', 'buttonRef']);
  return React.createElement(
    'button',
    _extends({
      className: classNames('btn btn-link', className),
      onClick: onToggle,
      ref: buttonRef
    }, restProps),
    React.createElement('i', { className: 'glyphicon glyphicon-eye-close' })
  );
};

ToggleButton.propTypes = {
  onToggle: PropTypes.func.isRequired,
  getMessage: PropTypes.func.isRequired,
  buttonRef: PropTypes.func.isRequired,
  className: PropTypes.string
};

ToggleButton.defaultProps = {
  className: undefined
};

var ColumnChooser$1 = function ColumnChooser$$1(props) {
  return React.createElement(ColumnChooser, _extends({
    overlayComponent: Overlay$1,
    containerComponent: Container,
    itemComponent: Item,
    toggleButtonComponent: ToggleButton
  }, props));
};

ColumnChooser$1.Container = Container;
ColumnChooser$1.Item = Item;
ColumnChooser$1.Overlay = Overlay$1;
ColumnChooser$1.ToggleButton = ToggleButton;

var Container$1 = function Container(_ref) {
  var clientOffset = _ref.clientOffset,
      style = _ref.style,
      className = _ref.className,
      children = _ref.children,
      restProps = objectWithoutProperties(_ref, ['clientOffset', 'style', 'className', 'children']);
  return React.createElement(
    'ul',
    _extends({
      className: classNames('list-group', className),
      style: _extends({
        cursor: 'move',
        position: 'fixed',
        zIndex: 1000,
        left: 0,
        top: 0,
        display: 'inline-block',
        transform: 'translate(calc(' + clientOffset.x + 'px - 50%), calc(' + clientOffset.y + 'px - 50%))'
      }, style)
    }, restProps),
    children
  );
};

Container$1.propTypes = {
  clientOffset: PropTypes.shape({
    x: PropTypes.number.isRequired,
    y: PropTypes.number.isRequired
  }).isRequired,
  style: PropTypes.object,
  className: PropTypes.string,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};

Container$1.defaultProps = {
  style: {},
  className: undefined,
  children: undefined
};

var Column = function Column(_ref2) {
  var column = _ref2.column,
      className = _ref2.className,
      restProps = objectWithoutProperties(_ref2, ['column', 'className']);
  return React.createElement(
    'li',
    _extends({
      className: classNames('list-group-item', className)
    }, restProps),
    column.title
  );
};

Column.propTypes = {
  column: PropTypes.object.isRequired,
  className: PropTypes.string
};

Column.defaultProps = {
  className: undefined
};

var DragDropProvider$1 = function (_React$PureComponent) {
  inherits(DragDropProvider$$1, _React$PureComponent);

  function DragDropProvider$$1() {
    classCallCheck(this, DragDropProvider$$1);
    return possibleConstructorReturn(this, (DragDropProvider$$1.__proto__ || Object.getPrototypeOf(DragDropProvider$$1)).apply(this, arguments));
  }

  createClass(DragDropProvider$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(DragDropProvider, _extends({
        containerComponent: Container$1,
        columnComponent: Column
      }, this.props));
    }
  }]);
  return DragDropProvider$$1;
}(React.PureComponent);

DragDropProvider$1.Container = Container$1;
DragDropProvider$1.Column = Column;

var PageSizeSelector = function PageSizeSelector(_ref) {
  var pageSize = _ref.pageSize,
      onPageSizeChange = _ref.onPageSizeChange,
      pageSizes = _ref.pageSizes,
      getMessage = _ref.getMessage;

  var showAll = getMessage('showAll');
  return React.createElement(
    'div',
    { style: { display: 'inline-block' } },
    React.createElement(
      'select',
      {
        className: 'form-control visible-xs-inline-block',
        style: { width: 'auto' },
        value: pageSize,
        onChange: function onChange(e) {
          return onPageSizeChange(parseInt(e.target.value, 10));
        }
      },
      pageSizes.map(function (val) {
        return React.createElement(
          'option',
          { key: val, value: val },
          val || showAll
        );
      })
    ),
    React.createElement(
      'ul',
      {
        className: 'pagination hidden-xs',
        style: {
          margin: 0,
          verticalAlign: 'bottom'
        }
      },
      pageSizes.map(function (item) {
        return React.createElement(
          'li',
          { key: item, className: item === pageSize ? 'active' : '' },
          React.createElement(
            'a',
            {
              href: '#',
              onClick: function onClick(e) {
                e.preventDefault();
                onPageSizeChange(item);
              }
            },
            item || showAll
          )
        );
      })
    )
  );
};

PageSizeSelector.propTypes = {
  pageSize: PropTypes.number.isRequired,
  onPageSizeChange: PropTypes.func.isRequired,
  pageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,
  getMessage: PropTypes.func.isRequired
};

var calculateStartPage = function calculateStartPage(currentPage, maxButtonCount, totalPageCount) {
  return Math.max(Math.min(currentPage - Math.floor(maxButtonCount / 2, 10), totalPageCount - maxButtonCount + 1), 1);
};

var renderPageButtons = function renderPageButtons(currentPage, totalPageCount, onCurrentPageChange) {
  var pageButtons = [];
  var maxButtonCount = 3;
  var startPage = 1;
  var endPage = totalPageCount || 1;

  if (maxButtonCount < totalPageCount) {
    startPage = calculateStartPage(currentPage + 1, maxButtonCount, totalPageCount);
    endPage = startPage + maxButtonCount - 1;
  }
  if (startPage > 1) {
    pageButtons.push(React.createElement(
      Pagination.Item,
      {
        key: 1,
        onClick: function onClick() {
          return onCurrentPageChange(0);
        }
      },
      1
    ));

    if (startPage > 2) {
      pageButtons.push(React.createElement(Pagination.Ellipsis, { key: 'ellipsisStart', disabled: true }));
    }
  }

  var _loop = function _loop(page) {
    pageButtons.push(React.createElement(
      Pagination.Item,
      {
        key: page,
        onClick: function onClick() {
          return onCurrentPageChange(page - 1);
        },
        active: page === currentPage + 1,
        disabled: startPage === endPage
      },
      page
    ));
  };

  for (var page = startPage; page <= endPage; page += 1) {
    _loop(page);
  }

  if (endPage < totalPageCount) {
    if (endPage < totalPageCount - 1) {
      pageButtons.push(React.createElement(Pagination.Ellipsis, { key: 'ellipsisEnd', disabled: true }));
    }

    pageButtons.push(React.createElement(
      Pagination.Item,
      {
        key: totalPageCount,
        onClick: function onClick() {
          return onCurrentPageChange(totalPageCount - 1);
        }
      },
      totalPageCount
    ));
  }

  return pageButtons;
};

var Pagination$1 = function Pagination$$1(_ref) {
  var totalPages = _ref.totalPages,
      currentPage = _ref.currentPage,
      onCurrentPageChange = _ref.onCurrentPageChange,
      totalCount = _ref.totalCount,
      pageSize = _ref.pageSize,
      getMessage = _ref.getMessage;

  var from = firstRowOnPage(currentPage, pageSize, totalCount);
  var to = lastRowOnPage(currentPage, pageSize, totalCount);
  return React.createElement(
    React.Fragment,
    null,
    React.createElement(
      Pagination,
      {
        style: {
          margin: 0,
          verticalAlign: 'bottom'
        },
        className: 'pull-right hidden-xs'
      },
      renderPageButtons(currentPage, totalPages, onCurrentPageChange)
    ),
    React.createElement(
      Pager,
      {
        className: 'pull-right visible-xs',
        style: { margin: 0 }
      },
      React.createElement(
        Pager.Item,
        {
          disabled: currentPage === 0,
          onClick: function onClick() {
            return onCurrentPageChange(currentPage - 1);
          }
        },
        '\xAB'
      ),
      '\xA0',
      React.createElement(
        Pager.Item,
        {
          disabled: currentPage === totalPages - 1 || totalCount === 0,
          onClick: function onClick() {
            return onCurrentPageChange(currentPage + 1);
          }
        },
        '\xBB'
      )
    ),
    React.createElement(
      'span',
      { className: 'pull-right visible-xs', style: { marginRight: '20px' } },
      React.createElement(
        'span',
        { style: { display: 'inline-block', verticalAlign: 'middle', lineHeight: '32px' } },
        getMessage('info', { from: from, to: to, count: totalCount })
      )
    )
  );
};

Pagination$1.propTypes = {
  totalPages: PropTypes.number.isRequired,
  currentPage: PropTypes.number.isRequired,
  onCurrentPageChange: PropTypes.func.isRequired,
  totalCount: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  getMessage: PropTypes.func.isRequired
};

var Pager$1 = function Pager$$1(_ref) {
  var currentPage = _ref.currentPage,
      _onCurrentPageChange = _ref.onCurrentPageChange,
      totalPages = _ref.totalPages,
      pageSize = _ref.pageSize,
      onPageSizeChange = _ref.onPageSizeChange,
      pageSizes = _ref.pageSizes,
      totalCount = _ref.totalCount,
      getMessage = _ref.getMessage,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['currentPage', 'onCurrentPageChange', 'totalPages', 'pageSize', 'onPageSizeChange', 'pageSizes', 'totalCount', 'getMessage', 'className']);
  return React.createElement(
    'div',
    _extends({
      className: classNames('clearfix', 'panel-footer', className)
    }, restProps),
    !!pageSizes.length && React.createElement(PageSizeSelector, {
      pageSize: pageSize,
      onPageSizeChange: onPageSizeChange,
      pageSizes: pageSizes,
      getMessage: getMessage
    }),
    React.createElement(Pagination$1, {
      totalPages: totalPages,
      totalCount: totalCount,
      currentPage: currentPage,
      onCurrentPageChange: function onCurrentPageChange(page) {
        return _onCurrentPageChange(page);
      },
      pageSize: pageSize,
      getMessage: getMessage
    })
  );
};

Pager$1.propTypes = {
  currentPage: PropTypes.number.isRequired,
  onCurrentPageChange: PropTypes.func.isRequired,
  totalPages: PropTypes.number.isRequired,
  pageSize: PropTypes.number.isRequired,
  onPageSizeChange: PropTypes.func.isRequired,
  pageSizes: PropTypes.arrayOf(PropTypes.number).isRequired,
  totalCount: PropTypes.number.isRequired,
  getMessage: PropTypes.func.isRequired,
  className: PropTypes.string
};

Pager$1.defaultProps = {
  className: undefined
};

var defaultMessages = {
  showAll: 'All',
  info: function info(_ref) {
    var from = _ref.from,
        to = _ref.to,
        count = _ref.count;
    return '' + from + (from < to ? '-' + to : '') + ' of ' + count;
  }
};

var PagingPanel$1 = function (_React$PureComponent) {
  inherits(PagingPanel$$1, _React$PureComponent);

  function PagingPanel$$1() {
    classCallCheck(this, PagingPanel$$1);
    return possibleConstructorReturn(this, (PagingPanel$$1.__proto__ || Object.getPrototypeOf(PagingPanel$$1)).apply(this, arguments));
  }

  createClass(PagingPanel$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(PagingPanel, _extends({
        containerComponent: Pager$1,
        messages: _extends({}, defaultMessages, messages)
      }, restProps));
    }
  }]);
  return PagingPanel$$1;
}(React.PureComponent);

PagingPanel$1.Container = Pager$1;

PagingPanel$1.propTypes = {
  messages: PropTypes.shape({
    showAll: PropTypes.string,
    info: PropTypes.oneOfType([PropTypes.string, PropTypes.func])
  })
};

PagingPanel$1.defaultProps = {
  messages: {}
};

var GroupPanelContainer = function GroupPanelContainer(_ref) {
  var children = _ref.children,
      restProps = objectWithoutProperties(_ref, ['children']);
  return React.createElement(
    'div',
    _extends({
      style: {
        width: '100%',
        marginTop: '5px'
      }
    }, restProps),
    children
  );
};

GroupPanelContainer.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node])
};

GroupPanelContainer.defaultProps = {
  children: null
};

var SortingIndicator = function SortingIndicator(_ref) {
  var direction = _ref.direction,
      style = _ref.style;
  return React.createElement('i', {
    className: 'glyphicon glyphicon-arrow-' + (direction === 'desc' ? 'down' : 'up'),
    style: _extends({
      top: '0',
      fontSize: '9px'
    }, style)
  });
};

SortingIndicator.propTypes = {
  direction: PropTypes.oneOf(['asc', 'desc']),
  style: PropTypes.object
};

SortingIndicator.defaultProps = {
  direction: null,
  style: null
};

var ENTER_KEY_CODE = 13;
var SPACE_KEY_CODE = 32;

var isActionKey = function isActionKey(keyCode) {
  return keyCode === ENTER_KEY_CODE || keyCode === SPACE_KEY_CODE;
};

var GroupPanelItem = function GroupPanelItem(_ref) {
  var _ref$item = _ref.item,
      column = _ref$item.column,
      draft = _ref$item.draft,
      onGroup = _ref.onGroup,
      showGroupingControls = _ref.showGroupingControls,
      showSortingControls = _ref.showSortingControls,
      sortingDirection = _ref.sortingDirection,
      onSort = _ref.onSort,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['item', 'onGroup', 'showGroupingControls', 'showSortingControls', 'sortingDirection', 'onSort', 'className']);

  var handleSortingChange = function handleSortingChange(e) {
    var isActionKeyDown = isActionKey(e.keyCode);
    var isMouseClick = e.keyCode === undefined;

    if (!showSortingControls || !(isActionKeyDown || isMouseClick)) return;

    var cancelSortingRelatedKey = e.metaKey || e.ctrlKey;
    var direction = (isMouseClick || isActionKeyDown) && cancelSortingRelatedKey ? null : undefined;

    e.preventDefault();
    onSort({
      direction: direction,
      keepOther: cancelSortingRelatedKey
    });
  };
  var handleUngroup = function handleUngroup(e) {
    var isActionKeyDown = isActionKey(e.keyCode);
    var isMouseClick = e.keyCode === undefined;

    if (!isActionKeyDown && !isMouseClick) return;
    onGroup();
  };
  return React.createElement(
    'div',
    _extends({
      className: classNames('btn-group', className),
      style: _extends({
        marginRight: '5px',
        marginBottom: '5px'
      }, draft ? { opacity: 0.3 } : null)
    }, restProps),
    React.createElement(
      'span',
      _extends({
        className: 'btn btn-default',
        onClick: handleSortingChange,
        onKeyDown: handleSortingChange
      }, showSortingControls ? { tabIndex: 0 } : null),
      column.title || column.name,
      showSortingControls && sortingDirection && React.createElement(
        'span',
        null,
        '\xA0',
        React.createElement(SortingIndicator, {
          direction: sortingDirection
        })
      )
    ),
    showGroupingControls && React.createElement(
      'span',
      {
        className: 'btn btn-default',
        onClick: handleUngroup
      },
      '\xA0',
      React.createElement('i', {
        className: 'glyphicon glyphicon-remove',
        style: {
          top: 0,
          fontSize: '9px',
          marginLeft: '-5px'
        }
      })
    )
  );
};

GroupPanelItem.propTypes = {
  item: PropTypes.shape({
    column: PropTypes.shape({
      title: PropTypes.string
    }).isRequired,
    draft: PropTypes.bool
  }).isRequired,
  showSortingControls: PropTypes.bool,
  sortingDirection: PropTypes.oneOf(['asc', 'desc', null]),
  className: PropTypes.string,
  onSort: PropTypes.func,
  onGroup: PropTypes.func,
  showGroupingControls: PropTypes.bool
};

GroupPanelItem.defaultProps = {
  showSortingControls: false,
  sortingDirection: undefined,
  className: undefined,
  onSort: undefined,
  onGroup: undefined,
  showGroupingControls: false
};

var GroupPanelEmptyMessage = function GroupPanelEmptyMessage(_ref) {
  var getMessage = _ref.getMessage,
      restProps = objectWithoutProperties(_ref, ['getMessage']);
  return React.createElement(
    'div',
    _extends({
      style: {
        padding: '7px 0'
      }
    }, restProps),
    getMessage('groupByColumn')
  );
};

GroupPanelEmptyMessage.propTypes = {
  getMessage: PropTypes.func.isRequired
};

var defaultMessages$1 = {
  groupByColumn: 'Drag a column header here to group by that column'
};

var GroupingPanel$1 = function (_React$PureComponent) {
  inherits(GroupingPanel$$1, _React$PureComponent);

  function GroupingPanel$$1() {
    classCallCheck(this, GroupingPanel$$1);
    return possibleConstructorReturn(this, (GroupingPanel$$1.__proto__ || Object.getPrototypeOf(GroupingPanel$$1)).apply(this, arguments));
  }

  createClass(GroupingPanel$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(GroupingPanel, _extends({
        layoutComponent: GroupPanelLayout,
        containerComponent: GroupPanelContainer,
        itemComponent: GroupPanelItem,
        emptyMessageComponent: GroupPanelEmptyMessage,
        messages: _extends({}, defaultMessages$1, messages)
      }, restProps));
    }
  }]);
  return GroupingPanel$$1;
}(React.PureComponent);

GroupingPanel$1.Container = GroupPanelContainer;
GroupingPanel$1.Item = GroupPanelItem;
GroupingPanel$1.EmptyMessage = GroupPanelEmptyMessage;

GroupingPanel$1.propTypes = {
  showSortingControls: PropTypes.bool,
  messages: PropTypes.shape({
    groupByColumn: PropTypes.string
  })
};

GroupingPanel$1.defaultProps = {
  showSortingControls: false,
  messages: {}
};

var ENTER_KEY_CODE$1 = 13;
var SPACE_KEY_CODE$1 = 32;

var handleMouseDown = function handleMouseDown(e) {
  e.target.style.outline = 'none';
};
var handleBlur = function handleBlur(e) {
  e.target.style.outline = '';
};

var TableDetailToggleCell = function TableDetailToggleCell(_ref) {
  var style = _ref.style,
      expanded = _ref.expanded,
      onToggle = _ref.onToggle,
      tableColumn = _ref.tableColumn,
      tableRow = _ref.tableRow,
      row = _ref.row,
      restProps = objectWithoutProperties(_ref, ['style', 'expanded', 'onToggle', 'tableColumn', 'tableRow', 'row']);

  var handleKeyDown = function handleKeyDown(e) {
    if (e.keyCode === ENTER_KEY_CODE$1 || e.keyCode === SPACE_KEY_CODE$1) {
      e.preventDefault();
      onToggle();
    }
  };
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        cursor: 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: function onClick(e) {
        e.stopPropagation();
        onToggle();
      }
    }, restProps),
    React.createElement('i', {
      className: 'glyphicon glyphicon-triangle-' + (expanded ? 'bottom' : 'right'),
      style: {
        fontSize: '9px',
        top: '0',
        display: 'block'
      },
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onKeyDown: handleKeyDown,
      onMouseDown: handleMouseDown,
      onBlur: handleBlur
    })
  );
};

TableDetailToggleCell.propTypes = {
  style: PropTypes.object,
  expanded: PropTypes.bool,
  onToggle: PropTypes.func,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object,
  row: PropTypes.object
};

TableDetailToggleCell.defaultProps = {
  style: null,
  expanded: false,
  onToggle: function onToggle() {},
  tableColumn: undefined,
  tableRow: undefined,
  row: undefined
};

var TableDetailCell = function TableDetailCell(_ref) {
  var colSpan = _ref.colSpan,
      style = _ref.style,
      children = _ref.children,
      className = _ref.className,
      tableColumn = _ref.tableColumn,
      tableRow = _ref.tableRow,
      row = _ref.row,
      restProps = objectWithoutProperties(_ref, ['colSpan', 'style', 'children', 'className', 'tableColumn', 'tableRow', 'row']);
  return React.createElement(
    'td',
    _extends({
      style: style,
      colSpan: colSpan,
      className: classNames('active', className)
    }, restProps),
    children
  );
};

TableDetailCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  className: PropTypes.string,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object,
  row: PropTypes.object
};

TableDetailCell.defaultProps = {
  style: null,
  colSpan: 1,
  className: undefined,
  tableColumn: undefined,
  tableRow: undefined,
  row: undefined,
  children: undefined
};

var TableRow = function TableRow(_ref) {
  var children = _ref.children,
      row = _ref.row,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['children', 'row', 'tableRow', 'tableColumn']);
  return React.createElement(
    'tr',
    restProps,
    children
  );
};

TableRow.propTypes = {
  children: PropTypes.node,
  row: PropTypes.object,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object
};

TableRow.defaultProps = {
  children: null,
  row: undefined,
  tableColumn: undefined,
  tableRow: undefined
};

var TableRowDetail$1 = function (_React$PureComponent) {
  inherits(TableRowDetail$$1, _React$PureComponent);

  function TableRowDetail$$1() {
    classCallCheck(this, TableRowDetail$$1);
    return possibleConstructorReturn(this, (TableRowDetail$$1.__proto__ || Object.getPrototypeOf(TableRowDetail$$1)).apply(this, arguments));
  }

  createClass(TableRowDetail$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableRowDetail, _extends({
        toggleCellComponent: TableDetailToggleCell,
        cellComponent: TableDetailCell,
        rowComponent: TableRow,
        toggleColumnWidth: 25
      }, this.props));
    }
  }]);
  return TableRowDetail$$1;
}(React.PureComponent);

TableRowDetail$1.Cell = TableDetailCell;
TableRowDetail$1.ToggleCell = TableDetailToggleCell;
TableRowDetail$1.Row = TableRow;

var ENTER_KEY_CODE$2 = 13;
var SPACE_KEY_CODE$2 = 32;

var handleMouseDown$1 = function handleMouseDown(e) {
  e.target.style.outline = 'none';
};
var handleBlur$1 = function handleBlur(e) {
  e.target.style.outline = '';
};

var TableGroupCell = function TableGroupCell(_ref) {
  var style = _ref.style,
      colSpan = _ref.colSpan,
      row = _ref.row,
      column = _ref.column,
      expanded = _ref.expanded,
      onToggle = _ref.onToggle,
      children = _ref.children,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['style', 'colSpan', 'row', 'column', 'expanded', 'onToggle', 'children', 'tableRow', 'tableColumn']);

  var handleClick = function handleClick() {
    return onToggle();
  };
  var handleKeyDown = function handleKeyDown(e) {
    var keyCode = e.keyCode;

    if (keyCode === ENTER_KEY_CODE$2 || keyCode === SPACE_KEY_CODE$2) {
      e.preventDefault();
      onToggle();
    }
  };

  return React.createElement(
    'td',
    _extends({
      colSpan: colSpan,
      style: _extends({
        cursor: 'pointer'
      }, style),
      onClick: handleClick
    }, restProps),
    React.createElement('i', {
      className: 'glyphicon glyphicon-triangle-' + (expanded ? 'bottom' : 'right'),
      style: {
        fontSize: '9px',
        top: 0,
        marginRight: '10px'
      },
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$1,
      onBlur: handleBlur$1,
      onKeyDown: handleKeyDown
    }),
    React.createElement(
      'strong',
      null,
      column.title || column.name,
      ': '
    ),
    children || row.value
  );
};

TableGroupCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  row: PropTypes.object,
  column: PropTypes.object,
  expanded: PropTypes.bool,
  onToggle: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableGroupCell.defaultProps = {
  style: null,
  colSpan: 1,
  row: {},
  column: {},
  expanded: false,
  onToggle: function onToggle() {},
  children: undefined,
  tableRow: undefined,
  tableColumn: undefined
};

var TableGroupRow$1 = function (_React$PureComponent) {
  inherits(TableGroupRow$$1, _React$PureComponent);

  function TableGroupRow$$1() {
    classCallCheck(this, TableGroupRow$$1);
    return possibleConstructorReturn(this, (TableGroupRow$$1.__proto__ || Object.getPrototypeOf(TableGroupRow$$1)).apply(this, arguments));
  }

  createClass(TableGroupRow$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableGroupRow, _extends({
        cellComponent: TableGroupCell,
        rowComponent: TableRow,
        indentColumnWidth: 20
      }, this.props));
    }
  }]);
  return TableGroupRow$$1;
}(React.PureComponent);

TableGroupRow$1.Row = TableRow;
TableGroupRow$1.Cell = TableGroupCell;

var TableSelectAllCell = function TableSelectAllCell(_ref) {
  var style = _ref.style,
      allSelected = _ref.allSelected,
      someSelected = _ref.someSelected,
      disabled = _ref.disabled,
      onToggle = _ref.onToggle,
      tableColumn = _ref.tableColumn,
      tableRow = _ref.tableRow,
      restProps = objectWithoutProperties(_ref, ['style', 'allSelected', 'someSelected', 'disabled', 'onToggle', 'tableColumn', 'tableRow']);

  var toggle = function toggle(e) {
    if (disabled) return;

    e.stopPropagation();
    onToggle();
  };

  return React.createElement(
    'th',
    _extends({
      style: _extends({
        cursor: !disabled && 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: toggle
    }, restProps),
    React.createElement('input', {
      style: {
        cursor: !disabled && 'pointer',
        margin: '0 auto',
        display: 'block'
      },
      type: 'checkbox',
      disabled: disabled,
      checked: allSelected,
      ref: function ref(_ref2) {
        if (_ref2) {
          var checkbox = _ref2;
          checkbox.indeterminate = someSelected;
        }
      },
      onChange: toggle,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    })
  );
};

TableSelectAllCell.propTypes = {
  style: PropTypes.object,
  allSelected: PropTypes.bool,
  someSelected: PropTypes.bool,
  disabled: PropTypes.bool,
  onToggle: PropTypes.func,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableSelectAllCell.defaultProps = {
  style: null,
  allSelected: false,
  someSelected: false,
  disabled: false,
  onToggle: function onToggle() {},
  tableRow: undefined,
  tableColumn: undefined
};

var TableSelectCell = function TableSelectCell(_ref) {
  var style = _ref.style,
      selected = _ref.selected,
      onToggle = _ref.onToggle,
      row = _ref.row,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['style', 'selected', 'onToggle', 'row', 'tableRow', 'tableColumn']);
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        cursor: 'pointer',
        verticalAlign: 'middle'
      }, style),
      onClick: function onClick(e) {
        e.stopPropagation();
        onToggle();
      }
    }, restProps),
    React.createElement('input', {
      style: {
        cursor: 'pointer',
        margin: '0 auto',
        display: 'block'
      },
      type: 'checkbox',
      checked: selected,
      onChange: onToggle,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    })
  );
};

TableSelectCell.propTypes = {
  style: PropTypes.object,
  selected: PropTypes.bool,
  onToggle: PropTypes.func,
  row: PropTypes.object,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableSelectCell.defaultProps = {
  style: null,
  selected: false,
  onToggle: function onToggle() {},
  row: undefined,
  tableRow: undefined,
  tableColumn: undefined
};

var TableSelectRow = function TableSelectRow(_ref) {
  var selected = _ref.selected,
      children = _ref.children,
      style = _ref.style,
      onToggle = _ref.onToggle,
      selectByRowClick = _ref.selectByRowClick;
  return React.createElement(
    'tr',
    {
      style: style,
      className: selected ? 'active' : '',
      onClick: function onClick(e) {
        if (!selectByRowClick) return;
        e.stopPropagation();
        onToggle();
      }
    },
    children
  );
};

TableSelectRow.propTypes = {
  selected: PropTypes.bool,
  children: PropTypes.node,
  onToggle: PropTypes.func,
  selectByRowClick: PropTypes.bool,
  style: PropTypes.object
};

TableSelectRow.defaultProps = {
  children: null,
  onToggle: function onToggle() {},
  selected: false,
  selectByRowClick: false,
  style: null
};

var TableSelection$1 = function (_React$PureComponent) {
  inherits(TableSelection$$1, _React$PureComponent);

  function TableSelection$$1() {
    classCallCheck(this, TableSelection$$1);
    return possibleConstructorReturn(this, (TableSelection$$1.__proto__ || Object.getPrototypeOf(TableSelection$$1)).apply(this, arguments));
  }

  createClass(TableSelection$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableSelection, _extends({
        rowComponent: TableSelectRow,
        cellComponent: TableSelectCell,
        headerCellComponent: TableSelectAllCell,
        selectionColumnWidth: 40
      }, this.props));
    }
  }]);
  return TableSelection$$1;
}(React.PureComponent);

TableSelection$1.Cell = TableSelectCell;
TableSelection$1.HeaderCell = TableSelectAllCell;

var TableContainer = function TableContainer(_ref) {
  var children = _ref.children,
      restProps = objectWithoutProperties(_ref, ['children']);
  return React.createElement(
    'div',
    _extends({
      className: 'table-responsive'
    }, restProps, {
      style: _extends({}, restProps.style, {
        overflow: 'auto',
        WebkitOverflowScrolling: 'touch'
      })
    }),
    children
  );
};

TableContainer.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

/* globals document:true window:true */

var globalStickyProp = void 0;
var testCSSProp = function testCSSProp(property, value, noPrefixes) {
  var prop = property + ':';
  var el = document.createElement('test');
  var mStyle = el.style;

  if (!noPrefixes) {
    mStyle.cssText = prop + ['-webkit-', '-moz-', '-ms-', '-o-', ''].join(value + ';' + prop) + value + ';';
  } else {
    mStyle.cssText = prop + value;
  }
  return mStyle[property];
};

var Table$2 = function (_React$Component) {
  inherits(Table$$1, _React$Component);

  function Table$$1() {
    classCallCheck(this, Table$$1);

    var _this = possibleConstructorReturn(this, (Table$$1.__proto__ || Object.getPrototypeOf(Table$$1)).call(this));

    _this.state = {
      stickyProp: globalStickyProp,
      backgroundColor: 'white'
    };
    return _this;
  }

  createClass(Table$$1, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.checkStyles();
    }
  }, {
    key: 'checkStyles',
    value: function checkStyles() {
      globalStickyProp = testCSSProp('position', 'sticky');

      var panel = this.node.parentElement;
      while (!panel.classList.contains('panel')) {
        panel = panel.parentElement;
      }

      var _window$getComputedSt = window.getComputedStyle(panel),
          backgroundColor = _window$getComputedSt.backgroundColor;

      if (this.state.backgroundColor !== backgroundColor || this.state.stickyProp !== globalStickyProp) {
        this.setState({ stickyProp: globalStickyProp, backgroundColor: backgroundColor });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          children = _props.children,
          use = _props.use,
          restProps = objectWithoutProperties(_props, ['children', 'use']);
      var _state = this.state,
          stickyProp = _state.stickyProp,
          backgroundColor = _state.backgroundColor;

      return React.createElement(
        'table',
        _extends({
          ref: function ref(node) {
            _this2.node = node;
          },
          className: 'table'
        }, restProps, {
          style: _extends({}, restProps.style, {
            tableLayout: 'fixed',
            overflow: 'hidden'
          }, use === 'head' ? {
            position: stickyProp,
            top: 0,
            zIndex: 1,
            background: backgroundColor
          } : null)
        }),
        children
      );
    }
  }]);
  return Table$$1;
}(React.Component);

Table$2.propTypes = {
  use: PropTypes.oneOf(['head']),
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired
};

Table$2.defaultProps = {
  use: undefined
};

var MINIMAL_COLUMN_WIDTH = 120;

var TableHead = function TableHead(props) {
  return React.createElement('thead', props);
};
var TableBody = function TableBody(props) {
  return React.createElement('tbody', props);
};

var TableLayout$1 = function TableLayout$$1(_ref) {
  var headerRows = _ref.headerRows,
      bodyRows = _ref.bodyRows,
      columns = _ref.columns,
      cellComponent = _ref.cellComponent,
      rowComponent = _ref.rowComponent;
  return React.createElement(TableLayout, {
    layoutComponent: StaticTableLayout,
    headerRows: headerRows,
    rows: bodyRows,
    columns: columns,
    minColumnWidth: MINIMAL_COLUMN_WIDTH,
    containerComponent: TableContainer,
    tableComponent: Table$2,
    headComponent: TableHead,
    bodyComponent: TableBody,
    rowComponent: rowComponent,
    cellComponent: cellComponent
  });
};

TableLayout$1.propTypes = {
  headerRows: PropTypes.array.isRequired,
  bodyRows: PropTypes.array.isRequired,
  columns: PropTypes.array.isRequired,
  cellComponent: PropTypes.func.isRequired,
  rowComponent: PropTypes.func.isRequired
};

var TableCell = function TableCell(_ref) {
  var style = _ref.style,
      column = _ref.column,
      value = _ref.value,
      children = _ref.children,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      row = _ref.row,
      restProps = objectWithoutProperties(_ref, ['style', 'column', 'value', 'children', 'tableRow', 'tableColumn', 'row']);
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        whiteSpace: 'nowrap',
        overflow: 'hidden',
        textOverflow: 'ellipsis',
        textAlign: tableColumn && tableColumn.align || 'left'
      }, style)
    }, restProps),
    children || value
  );
};

TableCell.propTypes = {
  style: PropTypes.object,
  value: PropTypes.any,
  column: PropTypes.object,
  row: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableCell.defaultProps = {
  style: null,
  value: undefined,
  column: undefined,
  row: undefined,
  children: undefined,
  tableRow: undefined,
  tableColumn: undefined
};

var TableStubCell = function TableStubCell(_ref) {
  var style = _ref.style,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['style', 'tableRow', 'tableColumn']);
  return React.createElement('td', _extends({
    style: _extends({
      padding: 0
    }, style)
  }, restProps));
};

TableStubCell.propTypes = {
  style: PropTypes.object,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableStubCell.defaultProps = {
  style: null,
  tableRow: undefined,
  tableColumn: undefined
};

var TableStubHeaderCell = function TableStubHeaderCell(_ref) {
  var style = _ref.style,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['style', 'tableRow', 'tableColumn']);
  return React.createElement('th', _extends({
    style: _extends({
      padding: 0
    }, style)
  }, restProps));
};

TableStubHeaderCell.propTypes = {
  style: PropTypes.object,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableStubHeaderCell.defaultProps = {
  style: null,
  tableRow: undefined,
  tableColumn: undefined
};

var TableNoDataCell = function TableNoDataCell(_ref) {
  var style = _ref.style,
      colSpan = _ref.colSpan,
      getMessage = _ref.getMessage,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['style', 'colSpan', 'getMessage', 'tableRow', 'tableColumn']);
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        textAlign: 'center',
        padding: '40px 0'
      }, style),
      colSpan: colSpan
    }, restProps),
    React.createElement(
      'big',
      { className: 'text-muted' },
      getMessage('noData')
    )
  );
};

TableNoDataCell.propTypes = {
  style: PropTypes.object,
  colSpan: PropTypes.number,
  getMessage: PropTypes.func.isRequired,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object
};

TableNoDataCell.defaultProps = {
  style: null,
  colSpan: 1,
  tableRow: undefined,
  tableColumn: undefined
};

var defaultMessages$2 = {
  noData: 'No data'
};

var Table$1 = function (_React$PureComponent) {
  inherits(Table$$1, _React$PureComponent);

  function Table$$1() {
    classCallCheck(this, Table$$1);
    return possibleConstructorReturn(this, (Table$$1.__proto__ || Object.getPrototypeOf(Table$$1)).apply(this, arguments));
  }

  createClass(Table$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(Table, _extends({
        layoutComponent: TableLayout$1,
        rowComponent: TableRow,
        cellComponent: TableCell,
        noDataRowComponent: TableRow,
        noDataCellComponent: TableNoDataCell,
        stubCellComponent: TableStubCell,
        stubHeaderCellComponent: TableStubHeaderCell,
        messages: _extends({}, defaultMessages$2, messages)
      }, restProps));
    }
  }]);
  return Table$$1;
}(React.PureComponent);

Table$1.Cell = TableCell;
Table$1.Row = TableRow;
Table$1.NoDataCell = TableNoDataCell;
Table$1.NoDataRow = TableRow;
Table$1.StubCell = TableStubCell;
Table$1.StubHeaderCell = TableStubCell;

Table$1.propTypes = {
  messages: PropTypes.shape({
    noData: PropTypes.string
  })
};

Table$1.defaultProps = {
  messages: {}
};

var MINIMAL_COLUMN_WIDTH$1 = 120;

var HeadTable = function HeadTable(props) {
  return React.createElement(Table$2, _extends({ use: 'head' }, props));
};
var TableHead$1 = function TableHead(props) {
  return React.createElement('thead', props);
};
var TableBody$1 = function TableBody(props) {
  return React.createElement('tbody', props);
};

var VirtualTableLayout$1 = function VirtualTableLayout$$1(_ref) {
  var headerRows = _ref.headerRows,
      bodyRows = _ref.bodyRows,
      columns = _ref.columns,
      cellComponent = _ref.cellComponent,
      rowComponent = _ref.rowComponent,
      height = _ref.height,
      estimatedRowHeight = _ref.estimatedRowHeight;
  return React.createElement(TableLayout, {
    layoutComponent: VirtualTableLayout,
    headerRows: headerRows,
    rows: bodyRows,
    columns: columns,
    cellComponent: cellComponent,
    rowComponent: rowComponent,
    headComponent: TableHead$1,
    bodyComponent: TableBody$1,
    tableComponent: Table$2,
    headTableComponent: HeadTable,
    containerComponent: TableContainer,
    estimatedRowHeight: estimatedRowHeight,
    minColumnWidth: MINIMAL_COLUMN_WIDTH$1,
    height: height
  });
};

VirtualTableLayout$1.propTypes = {
  headerRows: PropTypes.array.isRequired,
  bodyRows: PropTypes.array.isRequired,
  columns: PropTypes.array.isRequired,
  cellComponent: PropTypes.func.isRequired,
  rowComponent: PropTypes.func.isRequired,
  height: PropTypes.number.isRequired,
  estimatedRowHeight: PropTypes.number.isRequired
};

var defaultMessages$3 = {
  noData: 'No data'
};

var VirtualTable = function (_React$PureComponent) {
  inherits(VirtualTable, _React$PureComponent);

  function VirtualTable(props) {
    classCallCheck(this, VirtualTable);

    var _this = possibleConstructorReturn(this, (VirtualTable.__proto__ || Object.getPrototypeOf(VirtualTable)).call(this, props));

    var height = props.height,
        estimatedRowHeight = props.estimatedRowHeight;

    _this.layoutRenderComponent = createRenderComponent(VirtualTableLayout$1, { height: height, estimatedRowHeight: estimatedRowHeight });
    return _this;
  }

  createClass(VirtualTable, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(_ref) {
      var height = _ref.height,
          estimatedRowHeight = _ref.estimatedRowHeight;

      this.layoutRenderComponent.update({ height: height, estimatedRowHeight: estimatedRowHeight });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          height = _props.height,
          estimatedRowHeight = _props.estimatedRowHeight,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['height', 'estimatedRowHeight', 'messages']);


      return React.createElement(Table, _extends({
        layoutComponent: this.layoutRenderComponent.component,
        rowComponent: TableRow,
        cellComponent: TableCell,
        noDataRowComponent: TableRow,
        noDataCellComponent: TableNoDataCell,
        stubCellComponent: TableStubCell,
        stubHeaderCellComponent: TableStubHeaderCell,
        messages: _extends({}, defaultMessages$3, messages)
      }, restProps));
    }
  }]);
  return VirtualTable;
}(React.PureComponent);

VirtualTable.Cell = TableCell;
VirtualTable.Row = TableRow;
VirtualTable.NoDataCell = TableNoDataCell;
VirtualTable.NoDataRow = TableRow;
VirtualTable.StubCell = TableStubCell;
VirtualTable.StubHeaderCell = TableStubCell;

VirtualTable.propTypes = {
  estimatedRowHeight: PropTypes.number,
  height: PropTypes.number,
  messages: PropTypes.shape({
    noData: PropTypes.string
  })
};

VirtualTable.defaultProps = {
  estimatedRowHeight: 37,
  height: 530,
  messages: {}
};

var TableFilterCell = function TableFilterCell(_ref) {
  var style = _ref.style,
      filter = _ref.filter,
      onFilter = _ref.onFilter,
      children = _ref.children,
      column = _ref.column,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      getMessage = _ref.getMessage,
      restProps = objectWithoutProperties(_ref, ['style', 'filter', 'onFilter', 'children', 'column', 'tableRow', 'tableColumn', 'getMessage']);
  return React.createElement(
    'th',
    _extends({
      style: _extends({
        fontWeight: 'normal'
      }, style)
    }, restProps),
    children || React.createElement('input', {
      type: 'text',
      className: 'form-control',
      value: filter ? filter.value : '',
      onChange: function onChange(e) {
        return onFilter(e.target.value ? { value: e.target.value } : null);
      }
    })
  );
};

TableFilterCell.propTypes = {
  style: PropTypes.object,
  filter: PropTypes.object,
  onFilter: PropTypes.func,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)]),
  column: PropTypes.object,
  tableRow: PropTypes.object,
  tableColumn: PropTypes.object,
  getMessage: PropTypes.func
};

TableFilterCell.defaultProps = {
  style: null,
  filter: null,
  onFilter: function onFilter() {},
  children: undefined,
  column: undefined,
  tableRow: undefined,
  tableColumn: undefined,
  getMessage: undefined
};

var TableFilterRow$1 = function (_React$PureComponent) {
  inherits(TableFilterRow$$1, _React$PureComponent);

  function TableFilterRow$$1() {
    classCallCheck(this, TableFilterRow$$1);
    return possibleConstructorReturn(this, (TableFilterRow$$1.__proto__ || Object.getPrototypeOf(TableFilterRow$$1)).apply(this, arguments));
  }

  createClass(TableFilterRow$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableFilterRow, _extends({
        cellComponent: TableFilterCell,
        rowComponent: TableRow
      }, this.props));
    }
  }]);
  return TableFilterRow$$1;
}(React.PureComponent);

TableFilterRow$1.Cell = TableFilterCell;
TableFilterRow$1.Row = TableRow;

var ResizingControlLine = function ResizingControlLine(_ref) {
  var resizing = _ref.resizing,
      style = _ref.style;

  var resizingControlLineBody = resizing && React.createElement('div', {
    className: 'bg-primary',
    style: {
      position: 'absolute',
      top: 0,
      left: 0,
      height: '100%',
      width: '100%'
    }
  });

  return React.createElement(
    'div',
    {
      style: _extends({
        position: 'absolute',
        backgroundColor: '#ddd',
        height: '50%',
        width: '1px',
        top: '25%'
      }, style)
    },
    resizingControlLineBody
  );
};

ResizingControlLine.propTypes = {
  resizing: PropTypes.bool.isRequired,
  style: PropTypes.object.isRequired
};

var ResizingControl = function (_React$PureComponent) {
  inherits(ResizingControl, _React$PureComponent);

  function ResizingControl(props) {
    classCallCheck(this, ResizingControl);

    var _this = possibleConstructorReturn(this, (ResizingControl.__proto__ || Object.getPrototypeOf(ResizingControl)).call(this, props));

    _this.state = {
      resizing: false
    };

    _this.onResizeStart = function (_ref2) {
      var x = _ref2.x;

      _this.resizeStartingX = x;
      _this.setState({ resizing: true });
    };
    _this.onResizeUpdate = function (_ref3) {
      var x = _ref3.x;
      var onWidthDraft = _this.props.onWidthDraft;

      onWidthDraft({ shift: x - _this.resizeStartingX });
    };
    _this.onResizeEnd = function (_ref4) {
      var x = _ref4.x;
      var _this$props = _this.props,
          onWidthChange = _this$props.onWidthChange,
          onWidthDraftCancel = _this$props.onWidthDraftCancel;

      onWidthDraftCancel();
      onWidthChange({ shift: x - _this.resizeStartingX });
      _this.setState({ resizing: false });
    };
    return _this;
  }

  createClass(ResizingControl, [{
    key: 'render',
    value: function render() {
      var resizing = this.state.resizing;


      return React.createElement(
        Draggable,
        {
          onStart: this.onResizeStart,
          onUpdate: this.onResizeUpdate,
          onEnd: this.onResizeEnd
        },
        React.createElement(
          'div',
          {
            style: {
              position: 'absolute',
              userSelect: 'none',
              MozUserSelect: 'none',
              WebkitUserSelect: 'none',
              top: 0,
              right: '-8px',
              width: '16px',
              height: '100%',
              cursor: 'col-resize',
              zIndex: 100
            }
          },
          React.createElement(ResizingControlLine, { resizing: resizing, style: { left: '5px' } }),
          React.createElement(ResizingControlLine, { resizing: resizing, style: { left: '7px' } })
        )
      );
    }
  }]);
  return ResizingControl;
}(React.PureComponent);

ResizingControl.propTypes = {
  onWidthChange: PropTypes.func.isRequired,
  onWidthDraft: PropTypes.func.isRequired,
  onWidthDraftCancel: PropTypes.func.isRequired
};

var GroupingControl = function GroupingControl(_ref) {
  var align = _ref.align,
      onGroup = _ref.onGroup;

  var invertedAlign = align === 'left' ? 'right' : 'left';

  return React.createElement(
    'div',
    {
      onClick: function onClick(e) {
        e.stopPropagation();
        onGroup();
      },
      style: {
        float: invertedAlign,
        textAlign: invertedAlign,
        width: '14px'
      }
    },
    React.createElement('i', {
      className: 'glyphicon glyphicon-th-list',
      style: {
        top: '2px',
        fontSize: '9px',
        margin: '-5px',
        padding: '5px',
        cursor: 'pointer'
      }
    })
  );
};

GroupingControl.propTypes = {
  align: PropTypes.string.isRequired,
  onGroup: PropTypes.func.isRequired
};

var handleMouseDown$2 = function handleMouseDown(e) {
  e.currentTarget.style.outline = 'none';
};
var handleBlur$2 = function handleBlur(e) {
  e.currentTarget.style.outline = '';
};

var SortingControl = function SortingControl(_ref) {
  var align = _ref.align,
      sortingDirection = _ref.sortingDirection,
      columnTitle = _ref.columnTitle,
      onClick = _ref.onClick;
  return align === 'right' ? React.createElement(
    'span',
    {
      className: sortingDirection ? 'text-primary' : '',
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$2,
      onBlur: handleBlur$2,
      onKeyDown: onClick
    },
    React.createElement(SortingIndicator, {
      direction: sortingDirection,
      style: { visibility: sortingDirection ? 'visible' : 'hidden' }
    }),
    '\xA0',
    columnTitle
  ) : React.createElement(
    'span',
    {
      className: sortingDirection ? 'text-primary' : '',
      tabIndex: 0 // eslint-disable-line jsx-a11y/no-noninteractive-tabindex
      , onMouseDown: handleMouseDown$2,
      onBlur: handleBlur$2,
      onKeyDown: onClick
    },
    columnTitle,
    '\xA0',
    React.createElement(SortingIndicator, {
      direction: sortingDirection,
      style: { visibility: sortingDirection ? 'visible' : 'hidden' }
    })
  );
};

SortingControl.propTypes = {
  align: PropTypes.string.isRequired,
  sortingDirection: PropTypes.oneOf(['asc', 'desc']),
  columnTitle: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired
};

SortingControl.defaultProps = {
  sortingDirection: null
};

var ENTER_KEY_CODE$3 = 13;
var SPACE_KEY_CODE$3 = 32;

var TableHeaderCell = function (_React$PureComponent) {
  inherits(TableHeaderCell, _React$PureComponent);

  function TableHeaderCell(props) {
    classCallCheck(this, TableHeaderCell);

    var _this = possibleConstructorReturn(this, (TableHeaderCell.__proto__ || Object.getPrototypeOf(TableHeaderCell)).call(this, props));

    _this.state = {
      dragging: false
    };
    _this.onClick = function (e) {
      var _this$props = _this.props,
          showSortingControls = _this$props.showSortingControls,
          onSort = _this$props.onSort;

      var isActionKeyDown = e.keyCode === ENTER_KEY_CODE$3 || e.keyCode === SPACE_KEY_CODE$3;
      var isMouseClick = e.keyCode === undefined;

      if (!showSortingControls || !(isActionKeyDown || isMouseClick)) return;

      var cancelSortingRelatedKey = e.metaKey || e.ctrlKey;
      var direction = (isMouseClick || isActionKeyDown) && cancelSortingRelatedKey ? null : undefined;

      e.preventDefault();
      onSort({
        direction: direction,
        keepOther: e.shiftKey || cancelSortingRelatedKey
      });
    };
    return _this;
  }

  createClass(TableHeaderCell, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          style = _props.style,
          column = _props.column,
          tableColumn = _props.tableColumn,
          showSortingControls = _props.showSortingControls,
          sortingDirection = _props.sortingDirection,
          showGroupingControls = _props.showGroupingControls,
          onGroup = _props.onGroup,
          draggingEnabled = _props.draggingEnabled,
          resizingEnabled = _props.resizingEnabled,
          onWidthChange = _props.onWidthChange,
          onWidthDraft = _props.onWidthDraft,
          onWidthDraftCancel = _props.onWidthDraftCancel,
          tableRow = _props.tableRow,
          getMessage = _props.getMessage,
          onSort = _props.onSort,
          restProps = objectWithoutProperties(_props, ['style', 'column', 'tableColumn', 'showSortingControls', 'sortingDirection', 'showGroupingControls', 'onGroup', 'draggingEnabled', 'resizingEnabled', 'onWidthChange', 'onWidthDraft', 'onWidthDraftCancel', 'tableRow', 'getMessage', 'onSort']);
      var dragging = this.state.dragging;

      var align = tableColumn && tableColumn.align || 'left';
      var columnTitle = column && (column.title || column.name);

      var cellLayout = React.createElement(
        'th',
        _extends({
          style: _extends({
            position: 'relative'
          }, showSortingControls || draggingEnabled ? {
            userSelect: 'none',
            MozUserSelect: 'none',
            WebkitUserSelect: 'none'
          } : {}, showSortingControls || draggingEnabled ? { cursor: 'pointer' } : null, dragging || tableColumn && tableColumn.draft ? { opacity: 0.3 } : null, {
            padding: '5px'
          }, style),
          onClick: this.onClick
        }, restProps),
        showGroupingControls && React.createElement(GroupingControl, {
          align: align,
          onGroup: onGroup
        }),
        React.createElement(
          'div',
          {
            style: _extends({}, showGroupingControls ? defineProperty({}, 'margin' + (align === 'right' ? 'Left' : 'Right'), '14px') : null, {
              textAlign: align,
              whiteSpace: 'nowrap',
              overflow: 'hidden',
              textOverflow: 'ellipsis',
              padding: '3px'
            })
          },
          showSortingControls ? React.createElement(SortingControl, {
            align: align,
            sortingDirection: sortingDirection,
            columnTitle: columnTitle,
            onClick: this.onClick
          }) : columnTitle
        ),
        resizingEnabled && React.createElement(ResizingControl, {
          onWidthChange: onWidthChange,
          onWidthDraft: onWidthDraft,
          onWidthDraftCancel: onWidthDraftCancel
        })
      );

      return draggingEnabled ? React.createElement(
        DragSource,
        {
          ref: function ref(element) {
            _this2.cellRef = element;
          },
          payload: [{ type: 'column', columnName: column.name }],
          onStart: function onStart() {
            return _this2.setState({ dragging: true });
          },
          onEnd: function onEnd() {
            return _this2.cellRef && _this2.setState({ dragging: false });
          }
        },
        cellLayout
      ) : cellLayout;
    }
  }]);
  return TableHeaderCell;
}(React.PureComponent);

TableHeaderCell.propTypes = {
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object,
  column: PropTypes.object,
  style: PropTypes.object,
  showSortingControls: PropTypes.bool,
  sortingDirection: PropTypes.oneOf(['asc', 'desc', null]),
  onSort: PropTypes.func,
  showGroupingControls: PropTypes.bool,
  onGroup: PropTypes.func,
  draggingEnabled: PropTypes.bool,
  resizingEnabled: PropTypes.bool,
  onWidthChange: PropTypes.func,
  onWidthDraft: PropTypes.func,
  onWidthDraftCancel: PropTypes.func,
  getMessage: PropTypes.func
};

TableHeaderCell.defaultProps = {
  column: undefined,
  tableColumn: undefined,
  tableRow: undefined,
  style: null,
  showSortingControls: false,
  sortingDirection: undefined,
  onSort: undefined,
  showGroupingControls: false,
  onGroup: undefined,
  draggingEnabled: false,
  resizingEnabled: false,
  onWidthChange: undefined,
  onWidthDraft: undefined,
  onWidthDraftCancel: undefined,
  getMessage: undefined
};

var TableHeaderRow$1 = function (_React$PureComponent) {
  inherits(TableHeaderRow$$1, _React$PureComponent);

  function TableHeaderRow$$1() {
    classCallCheck(this, TableHeaderRow$$1);
    return possibleConstructorReturn(this, (TableHeaderRow$$1.__proto__ || Object.getPrototypeOf(TableHeaderRow$$1)).apply(this, arguments));
  }

  createClass(TableHeaderRow$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableHeaderRow, _extends({
        cellComponent: TableHeaderCell,
        rowComponent: TableRow
      }, this.props));
    }
  }]);
  return TableHeaderRow$$1;
}(React.PureComponent);

TableHeaderRow$1.Cell = TableHeaderCell;
TableHeaderRow$1.Row = TableRow;

var EditCell = function EditCell(_ref) {
  var column = _ref.column,
      value = _ref.value,
      onValueChange = _ref.onValueChange,
      style = _ref.style,
      children = _ref.children,
      row = _ref.row,
      tableRow = _ref.tableRow,
      tableColumn = _ref.tableColumn,
      restProps = objectWithoutProperties(_ref, ['column', 'value', 'onValueChange', 'style', 'children', 'row', 'tableRow', 'tableColumn']);
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        verticalAlign: 'middle',
        padding: '1px'
      }, style)
    }, restProps),
    children || React.createElement('input', {
      type: 'text',
      className: 'form-control',
      value: value,
      onChange: function onChange(e) {
        return onValueChange(e.target.value);
      },
      style: {
        width: '100%',
        textAlign: tableColumn && tableColumn.align
      }
    })
  );
};
EditCell.propTypes = {
  column: PropTypes.object,
  row: PropTypes.object,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object,
  value: PropTypes.any,
  onValueChange: PropTypes.func.isRequired,
  style: PropTypes.object,
  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])
};
EditCell.defaultProps = {
  column: undefined,
  row: undefined,
  tableColumn: undefined,
  tableRow: undefined,
  value: '',
  style: {},
  children: undefined
};

var TableEditRow$1 = function (_React$PureComponent) {
  inherits(TableEditRow$$1, _React$PureComponent);

  function TableEditRow$$1() {
    classCallCheck(this, TableEditRow$$1);
    return possibleConstructorReturn(this, (TableEditRow$$1.__proto__ || Object.getPrototypeOf(TableEditRow$$1)).apply(this, arguments));
  }

  createClass(TableEditRow$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableEditRow, _extends({
        cellComponent: EditCell,
        rowComponent: TableRow
      }, this.props));
    }
  }]);
  return TableEditRow$$1;
}(React.PureComponent);

TableEditRow$1.Cell = EditCell;
TableEditRow$1.Row = TableRow;

var CommandButton = function CommandButton(_ref) {
  var onExecute = _ref.onExecute,
      text = _ref.text,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['onExecute', 'text', 'className']);
  return React.createElement(
    'button',
    _extends({
      className: classNames('btn', 'btn-link', className),
      onClick: function onClick(e) {
        e.stopPropagation();
        onExecute();
      }
    }, restProps),
    text
  );
};

CommandButton.propTypes = {
  text: PropTypes.string.isRequired,
  onExecute: PropTypes.func.isRequired,
  className: PropTypes.string
};

CommandButton.defaultProps = {
  className: undefined
};

var EditCommandHeadingCell = function EditCommandHeadingCell(_ref2) {
  var children = _ref2.children,
      style = _ref2.style,
      tableColumn = _ref2.tableColumn,
      tableRow = _ref2.tableRow,
      restProps = objectWithoutProperties(_ref2, ['children', 'style', 'tableColumn', 'tableRow']);
  return React.createElement(
    'th',
    _extends({
      style: _extends({
        whiteSpace: 'nowrap',
        textAlign: 'center',
        padding: 0
      }, style)
    }, restProps),
    children
  );
};

EditCommandHeadingCell.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  style: PropTypes.object,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object
};

EditCommandHeadingCell.defaultProps = {
  children: undefined,
  style: {},
  tableColumn: undefined,
  tableRow: undefined
};

var EditCommandCell = function EditCommandCell(_ref3) {
  var children = _ref3.children,
      style = _ref3.style,
      tableColumn = _ref3.tableColumn,
      tableRow = _ref3.tableRow,
      restProps = objectWithoutProperties(_ref3, ['children', 'style', 'tableColumn', 'tableRow']);
  return React.createElement(
    'td',
    _extends({
      style: _extends({
        whiteSpace: 'nowrap',
        textAlign: 'center',
        padding: 0
      }, style)
    }, restProps),
    children
  );
};

EditCommandCell.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),
  style: PropTypes.object,
  tableColumn: PropTypes.object,
  tableRow: PropTypes.object
};

EditCommandCell.defaultProps = {
  children: undefined,
  style: {},
  tableColumn: undefined,
  tableRow: undefined
};

var defaultMessages$4 = {
  addCommand: 'New',
  editCommand: 'Edit',
  deleteCommand: 'Delete',
  commitCommand: 'Save',
  cancelCommand: 'Cancel'
};

var TableEditColumn$1 = function (_React$PureComponent) {
  inherits(TableEditColumn$$1, _React$PureComponent);

  function TableEditColumn$$1() {
    classCallCheck(this, TableEditColumn$$1);
    return possibleConstructorReturn(this, (TableEditColumn$$1.__proto__ || Object.getPrototypeOf(TableEditColumn$$1)).apply(this, arguments));
  }

  createClass(TableEditColumn$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(TableEditColumn, _extends({
        cellComponent: EditCommandCell,
        headerCellComponent: EditCommandHeadingCell,
        commandComponent: CommandButton,
        messages: _extends({}, defaultMessages$4, messages)
      }, restProps));
    }
  }]);
  return TableEditColumn$$1;
}(React.PureComponent);

TableEditColumn$1.Command = CommandButton;
TableEditColumn$1.Cell = EditCommandCell;
TableEditColumn$1.HeaderCell = EditCommandHeadingCell;

TableEditColumn$1.propTypes = {
  messages: PropTypes.shape({
    addCommand: PropTypes.string,
    editCommand: PropTypes.string,
    deleteCommand: PropTypes.string,
    commitCommand: PropTypes.string,
    cancelCommand: PropTypes.string
  })
};

TableEditColumn$1.defaultProps = {
  messages: {}
};

var EmptyMessage = function EmptyMessage(_ref) {
  var getMessage = _ref.getMessage,
      className = _ref.className,
      restProps = objectWithoutProperties(_ref, ['getMessage', 'className']);
  return React.createElement(
    'div',
    _extends({
      className: classNames('panel-body', className)
    }, restProps),
    getMessage('noColumns')
  );
};

EmptyMessage.propTypes = {
  getMessage: PropTypes.func.isRequired,
  className: PropTypes.string
};

EmptyMessage.defaultProps = {
  className: undefined
};

var defaultMessages$5 = {
  noColumns: 'Nothing to show'
};

var TableColumnVisibility$1 = function (_React$PureComponent) {
  inherits(TableColumnVisibility$$1, _React$PureComponent);

  function TableColumnVisibility$$1() {
    classCallCheck(this, TableColumnVisibility$$1);
    return possibleConstructorReturn(this, (TableColumnVisibility$$1.__proto__ || Object.getPrototypeOf(TableColumnVisibility$$1)).apply(this, arguments));
  }

  createClass(TableColumnVisibility$$1, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          messages = _props.messages,
          restProps = objectWithoutProperties(_props, ['messages']);


      return React.createElement(TableColumnVisibility, _extends({
        emptyMessageComponent: EmptyMessage,
        messages: _extends({}, defaultMessages$5, messages)
      }, restProps));
    }
  }]);
  return TableColumnVisibility$$1;
}(React.PureComponent);

TableColumnVisibility$1.EmptyMessage = EmptyMessage;

TableColumnVisibility$1.propTypes = {
  messages: PropTypes.shape({
    noColumns: PropTypes.string
  })
};

TableColumnVisibility$1.defaultProps = {
  messages: {}
};

var TableReorderingCell = function TableReorderingCell(_ref) {
  var style = _ref.style,
      getCellDimensions = _ref.getCellDimensions;

  var refHandler = function refHandler(node) {
    return node && getCellDimensions(function () {
      var _node$getBoundingClie = node.getBoundingClientRect(),
          left = _node$getBoundingClie.left,
          right = _node$getBoundingClie.right;

      return { left: left, right: right };
    });
  };
  return React.createElement('td', {
    ref: refHandler,
    style: _extends({}, style, { padding: 0, border: 'none' })
  });
};

TableReorderingCell.propTypes = {
  getCellDimensions: PropTypes.func.isRequired,
  style: PropTypes.object
};

TableReorderingCell.defaultProps = {
  style: {}
};

var TableContainer$1 = function TableContainer(_ref) {
  var onOver = _ref.onOver,
      onLeave = _ref.onLeave,
      onDrop = _ref.onDrop,
      children = _ref.children;
  return React.createElement(
    DropTarget,
    {
      onOver: onOver,
      onLeave: onLeave,
      onDrop: onDrop
    },
    children
  );
};

// eslint-disable-next-line react/prop-types
var ReorderingRow = function ReorderingRow(_ref2) {
  var style = _ref2.style,
      restParams = objectWithoutProperties(_ref2, ['style']);
  return React.createElement(TableRow, _extends({
    style: _extends({}, style, {
      visibility: 'hidden'
    })
  }, restParams));
};

var TableColumnReordering$1 = function TableColumnReordering$$1(props) {
  return React.createElement(TableColumnReordering, _extends({
    tableContainerComponent: TableContainer$1,
    rowComponent: ReorderingRow,
    cellComponent: TableReorderingCell
  }, props));
};

var TableColumnResizing$1 = function (_React$PureComponent) {
  inherits(TableColumnResizing$$1, _React$PureComponent);

  function TableColumnResizing$$1() {
    classCallCheck(this, TableColumnResizing$$1);
    return possibleConstructorReturn(this, (TableColumnResizing$$1.__proto__ || Object.getPrototypeOf(TableColumnResizing$$1)).apply(this, arguments));
  }

  createClass(TableColumnResizing$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(TableColumnResizing, this.props);
    }
  }]);
  return TableColumnResizing$$1;
}(React.PureComponent);

var Toolbar$2 = function Toolbar$$1(_ref) {
  var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      restProps = objectWithoutProperties(_ref, ['children', 'className', 'style']);
  return React.createElement(
    'div',
    _extends({
      className: classNames('panel-heading', className),
      style: _extends({
        display: 'flex',
        alignItems: 'center',
        position: 'relative',
        minHeight: '55px',
        padding: '0px 15px'
      }, style)
    }, restProps),
    children
  );
};

Toolbar$2.propTypes = {
  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]).isRequired,
  className: PropTypes.string,
  style: PropTypes.object
};

Toolbar$2.defaultProps = {
  className: undefined,
  style: null
};

var FlexibleSpace = function FlexibleSpace() {
  return React.createElement('div', { style: { flex: '0 0 0', marginLeft: 'auto' } });
};

var Toolbar$1 = function (_React$PureComponent) {
  inherits(Toolbar$$1, _React$PureComponent);

  function Toolbar$$1() {
    classCallCheck(this, Toolbar$$1);
    return possibleConstructorReturn(this, (Toolbar$$1.__proto__ || Object.getPrototypeOf(Toolbar$$1)).apply(this, arguments));
  }

  createClass(Toolbar$$1, [{
    key: 'render',
    value: function render() {
      return React.createElement(Toolbar, _extends({
        rootComponent: Toolbar$2,
        flexibleSpaceComponent: FlexibleSpace
      }, this.props));
    }
  }]);
  return Toolbar$$1;
}(React.PureComponent);

Toolbar$1.Root = Toolbar$2;

export { Grid$1 as Grid, ColumnChooser$1 as ColumnChooser, DragDropProvider$1 as DragDropProvider, PagingPanel$1 as PagingPanel, GroupingPanel$1 as GroupingPanel, TableRowDetail$1 as TableRowDetail, TableGroupRow$1 as TableGroupRow, TableSelection$1 as TableSelection, Table$1 as Table, VirtualTable, TableFilterRow$1 as TableFilterRow, TableHeaderRow$1 as TableHeaderRow, TableEditRow$1 as TableEditRow, TableEditColumn$1 as TableEditColumn, TableColumnVisibility$1 as TableColumnVisibility, TableColumnReordering$1 as TableColumnReordering, TableColumnResizing$1 as TableColumnResizing, Toolbar$1 as Toolbar };
//# sourceMappingURL=dx-react-grid-bootstrap3.es.js.map
